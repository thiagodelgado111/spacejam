// Generated by CoffeeScript 1.8.0
(function() {
  var ChildProcess, expect, path, _;

  expect = require("chai").expect;

  ChildProcess = require('../../lib/ChildProcess');

  path = require('path');

  _ = require('underscore');

  describe("scripts", function() {
    var child, execOptions, execRun, execTestPackages, meteorStubDir, spacejamBinDir, validateExpectedEnv;
    spacejamBinDir = path.resolve(__dirname, "../../bin");
    meteorStubDir = path.resolve(__dirname, "../bin");
    child = null;
    execOptions = null;
    validateExpectedEnv = function(env, expectedEnv) {
      var name, value, _results;
      _results = [];
      for (name in expectedEnv) {
        value = expectedEnv[name];
        _results.push(expect(env[name], "process.env." + name).to.equal(value));
      }
      return _results;
    };
    execRun = function(done, args, expectedArgs, expectedEnv) {
      if (expectedEnv == null) {
        expectedEnv = {};
      }
      return child.exec("" + spacejamBinDir + "/mrun " + args, execOptions, (function(_this) {
        return function(err, stdout, stderr) {
          var actualArgs, output;
          try {
            expect(err).to.be["null"];
            output = JSON.parse(stdout);
            actualArgs = output.argv.slice(2).join(' ');
            expect(actualArgs).to.deep.equal(expectedArgs);
            validateExpectedEnv(output.env, expectedEnv);
            return done();
          } catch (_error) {
            err = _error;
            return done(err);
          }
        };
      })(this));
    };
    execTestPackages = function(done, args, expectedArgs, expectedEnv) {
      var cmdLine;
      if (expectedEnv == null) {
        expectedEnv = {};
      }
      cmdLine = "" + spacejamBinDir + "/mtp " + args;
      return child.exec(cmdLine, execOptions, (function(_this) {
        return function(err, stdout, stderr) {
          var actualArgs, output;
          try {
            expect(err).to.be["null"];
            output = JSON.parse(stdout);
            actualArgs = output.argv.slice(2).join(' ');
            expectedEnv.METEOR_TEST_PACKAGES = '1';
            if (expectedEnv.PORT == null) {
              expectedEnv.PORT = '3100';
            }
            if (expectedEnv.ROOT_URL == null) {
              expectedEnv.ROOT_URL = 'http://localhost:3100/';
            }
            expectedArgs = "test-packages --port " + expectedEnv.PORT + " " + expectedArgs;
            expect(actualArgs).to.deep.equal(expectedArgs);
            validateExpectedEnv(output.env, expectedEnv);
            return done();
          } catch (_error) {
            err = _error;
            return done(err);
          }
        };
      })(this));
    };
    beforeEach(function() {
      var childEnv;
      childEnv = _.clone(process.env);
      childEnv.PATH = "" + meteorStubDir + ":" + childEnv.PATH;
      delete childEnv.PORT;
      delete childEnv.ROOT_URL;
      delete childEnv.MONGO_URL;
      delete childEnv.METEOR_SETTINGS_PATH;
      delete childEnv.METEOR_APP_HOME;
      delete childEnv.METEOR_TEST_PACKAGES;
      delete childEnv.TEST_PORT;
      delete childEnv.TEST_ROOT_URL;
      delete childEnv.TEST_MONGO_URL;
      delete childEnv.TEST_METEOR_SETTINGS_PATH;
      execOptions = {
        env: childEnv
      };
      return child = new ChildProcess();
    });
    afterEach(function() {
      try {
        return child != null ? child.kill('SIGTERM') : void 0;
      } finally {
        child = null;
      }
    });
    describe("mrun", function() {
      it("should launch meteor with the provided command line arguments", function(done) {
        return execRun(done, '--port 4000', '--port 4000');
      });
      it("should launch meteor with --settings $METEOR_SETTINGS_PATH", function(done) {
        var expectedArgs, settingsPath;
        settingsPath = __dirname + '/settings.json';
        execOptions.env.METEOR_SETTINGS_PATH = settingsPath;
        expectedArgs = "--settings " + settingsPath + " --port 4000";
        return execRun(done, '--port 4000', expectedArgs);
      });
      return it("should cd to and run meteor in $METEOR_APP_HOME", function(done) {
        var expectedArgs, expectedEnv, settingsPath;
        settingsPath = __dirname + '/settings.json';
        execOptions.env.METEOR_APP_HOME = path.resolve(__dirname, '../apps/leaderboard');
        expectedArgs = "--port 4000";
        expectedEnv = {
          PWD: execOptions.env.METEOR_APP_HOME
        };
        return execRun(done, '--port 4000', expectedArgs, expectedEnv);
      });
    });
    return describe("mtp", function() {
      it("should launch meteor with --port 3100 and set ROOT_URL to 'http://localhost:3100/' by default", function(done) {
        return execTestPackages(done, '--production', '--production');
      });
      it("should launch meteor with --port $TEST_PORT, set PORT to $TEST_PORT and ROOT_URL to 'http://localhost:$TEST_PORT/'", function(done) {
        var expectedEnv;
        execOptions.env.TEST_PORT = 3200;
        expectedEnv = {
          PORT: '3200',
          ROOT_URL: 'http://localhost:3200/'
        };
        return execTestPackages(done, '--production', '--production', expectedEnv);
      });
      it("should launch meteor with ROOT_URL set to TEST_ROOT_URL", function(done) {
        var expectedEnv;
        execOptions.env.TEST_PORT = 3300;
        execOptions.env.TEST_ROOT_URL = 'https://myvm/';
        expectedEnv = {
          PORT: '3300',
          ROOT_URL: 'https://myvm/'
        };
        return execTestPackages(done, '--production', '--production', expectedEnv);
      });
      it("should launch meteor with MONGO_URL set to TEST_MONGO_URL", function(done) {
        var expectedEnv;
        execOptions.env.TEST_MONGO_URL = 'mongodb://user:pass@mongohq.com/testdb';
        expectedEnv = {
          MONGO_URL: execOptions.env.TEST_MONGO_URL
        };
        return execTestPackages(done, '--production', '--production', expectedEnv);
      });
      it("should launch meteor with --settings $METEOR_SETTINGS_PATH", function(done) {
        var settingsPath;
        settingsPath = __dirname + '/settings.json';
        execOptions.env.METEOR_SETTINGS_PATH = settingsPath;
        return execTestPackages(done, '--release 1.0', "--settings " + settingsPath + " --release 1.0");
      });
      return it("should launch meteor with --settings $TEST_METEOR_SETTINGS_PATH", function(done) {
        var settingsPath;
        settingsPath = __dirname + '/test-settings.json';
        execOptions.env.TEST_METEOR_SETTINGS_PATH = settingsPath;
        return execTestPackages(done, '--release 1.0', "--settings " + settingsPath + " --release 1.0");
      });
    });
  });

}).call(this);
